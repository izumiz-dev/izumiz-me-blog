---
import type { SelectProperty, Post } from '@lib/interfaces.ts';
import { NUMBER_OF_POSTS_PER_PAGE } from '../../../server-constants.ts';
import {
  getPostsByTag,
  getRankedPosts,
  getAllTags,
  getNumberOfPagesByTag,
} from '@lib/notion/client.ts';
import Layout from '@layouts/Layout.astro';
import NoContents from '@components/NoContents.astro';
import PostDate from '@components/PostDate.astro';
import PostTags from '@components/PostTags.astro';
import PostTitle from '@components/PostTitle.astro';
import Pagination from '@components/Pagination.astro';
import BlogPostsLink from '@components/BlogPostsLink.astro';
import BlogTagsLink from '@components/BlogTagsLink.astro';
import styles from '@styles/blog.module.css';
import '@styles/notion-color.css';

export async function getStaticPaths() {
  const allTags = await getAllTags();
  return allTags.map((tag: SelectProperty) => ({ params: { tag: tag.name } }));
}

const { tag } = Astro.params;

const [posts, rankedPosts, allTagsData, numberOfPages] = await Promise.all([
  getPostsByTag(tag, NUMBER_OF_POSTS_PER_PAGE),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPagesByTag(tag),
]);

const currentTag =
  posts.length > 0
    ? posts[0].Tags.find((t: SelectProperty) => t.name === tag)
    : undefined;
const pageTitle = `Posts in ${tag}`; // SITE_TITLE を削除
const pageDescription = `Filtered posts by tag: ${tag}`;
const defaultOgImage = new URL('/default-og-image.png', Astro.site);
---

<Layout
  title={pageTitle}
  path={`/posts/tag/${tag}`}
  description={pageDescription}
  ogImage={defaultOgImage.toString()}
  openGraph={{
    basic: {
      title: pageTitle,
      type: 'website',
      image: defaultOgImage.toString(),
    },
    image: {
      alt: pageTitle,
    },
  }}
>
  <div slot="main" class={styles.main}>
    <header>
      {
        currentTag && (
          <div class="tag-container">
            <span class={`tag ${currentTag.color}`}>{tag}</span>
          </div>
        )
      }
    </header>

    {
      posts.length === 0 ? (
        <NoContents contents={posts} />
      ) : (
        posts.map((post: Post) => (
          <div class={styles.post}>
            <PostDate post={post} />
            <PostTags post={post} enableLink={true} />
            <PostTitle post={post} enableLink={true} />
          </div>
        ))
      )
    }

    <footer>
      <Pagination tag={tag} currentPage={1} numberOfPages={numberOfPages} />
    </footer>
  </div>

  <div slot="aside" class={styles.aside}>
    <BlogPostsLink heading="固定記事" posts={rankedPosts} />
    <BlogTagsLink heading="タグ一覧" tags={allTagsData} />
  </div>
</Layout>

<style>
  .tag-container {
    margin: 0;
    line-height: 1.3;
    font-size: 1.2rem;
    font-weight: normal;
  }
  @media (max-width: 640px) {
    .tag-container {
      font-size: 1.15rem;
    }
  }
  .tag-container span.tag {
    border-radius: 12px;
    padding: 3px 9px;
  }
</style>
