---
export interface Props {
  url: URL;
}

const { url } = Astro.props;
const locals = Astro.locals as { tweetLazyScriptInserted?: boolean };

const postURL =
  url.hostname === 'x.com' || url.hostname === 'www.x.com'
    ? new URL(url.pathname, 'https://twitter.com')
    : url;

const shouldInjectScript = !locals.tweetLazyScriptInserted;
locals.tweetLazyScriptInserted = true;

const scriptContent = `(() => {
  const ATTRIBUTE = 'data-tweet-embed';
  const SCRIPT_URL = 'https://platform.twitter.com/widgets.js';
  const MEDIA_QUERY = '(prefers-color-scheme: dark)';

  const loadTwitterScript = () => {
    if (window.__mermaidTwitterPromise) {
      return window.__mermaidTwitterPromise;
    }
    window.__mermaidTwitterPromise = new Promise((resolve) => {
      if (window.twttr && window.twttr.widgets) {
        resolve(window.twttr);
        return;
      }
      const script = document.createElement('script');
      script.src = SCRIPT_URL;
      script.async = true;
      script.onload = () => resolve(window.twttr);
      document.head.appendChild(script);
    });
    return window.__mermaidTwitterPromise;
  };

  const getTheme = () =>
    window.matchMedia(MEDIA_QUERY).matches ? 'dark' : 'light';

  const ensureBlockquote = (target, tweetUrl) => {
    let blockquote = target.querySelector('blockquote.twitter-tweet');
    if (!blockquote) {
      blockquote = document.createElement('blockquote');
      blockquote.className = 'twitter-tweet';
      const anchor = document.createElement('a');
      anchor.href = tweetUrl;
      blockquote.appendChild(anchor);
      target.prepend(blockquote);
    }
    blockquote.setAttribute('data-theme', getTheme());
    blockquote.setAttribute('data-chrome', 'transparent');
    return blockquote;
  };

  const cleanupWidgets = (target) => {
    target.querySelectorAll('iframe').forEach((node) => node.remove());
    target
      .querySelectorAll('.twitter-tweet-rendered')
      .forEach((node) => node.remove());
  };

  const render = (target) => {
    const tweetUrl = target.getAttribute('data-tweet-url');
    if (!tweetUrl) {
      return;
    }
    ensureBlockquote(target, tweetUrl);
    loadTwitterScript().then((twttr) => {
      if (!twttr || !twttr.widgets) {
        return;
      }
      cleanupWidgets(target);
      twttr.widgets.load(target);
    });
  };

  const activate = (target) => {
    if (!target.getAttribute('data-tweet-activated')) {
      target.setAttribute('data-tweet-activated', 'true');
    }
    render(target);
  };

  const observe = () => {
    const targets = document.querySelectorAll('[' + ATTRIBUTE + ']');
    if (!('IntersectionObserver' in window)) {
      targets.forEach((target) => activate(target));
      return;
    }
    const observer = new IntersectionObserver(
      (entries, obs) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            obs.unobserve(entry.target);
            activate(entry.target);
          }
        });
      },
      { rootMargin: '300px 0px' }
    );
    targets.forEach((target) => observer.observe(target));
  };

  const setupThemeListener = () => {
    if (window.__tweetThemeListenerSetup) {
      return;
    }
    window.__tweetThemeListenerSetup = true;
    const mql = window.matchMedia(MEDIA_QUERY);
    const handleThemeChange = () => {
      document
        .querySelectorAll('[' + ATTRIBUTE + '][data-tweet-activated]')
        .forEach((target) => render(target));
    };
    if (mql.addEventListener) {
      mql.addEventListener('change', handleThemeChange);
    } else if (mql.addListener) {
      mql.addListener(handleThemeChange);
    }
  };

  if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', observe, { once: true });
    } else {
      observe();
    }
    document.addEventListener('astro:page-load', observe);
    setupThemeListener();
  }
})();`;
---

<div class="tweet-embed" data-tweet-embed data-tweet-url={postURL.toString()}>
  <blockquote class="twitter-tweet" data-chrome="transparent">
    <a href={postURL}></a>
  </blockquote>
  <p class="tweet-fallback">
    <a href={postURL} target="_blank" rel="noopener">View on X</a>
  </p>
</div>

{shouldInjectScript && <script is:inline set:html={scriptContent} />}

<style>
  .tweet-embed {
    width: 100%;
    max-width: 550px;
    margin: 0.4rem auto;
  }

  .tweet-embed blockquote.twitter-tweet,
  .tweet-embed :global(.twitter-tweet-rendered) {
    margin: 0 !important;
    border-radius: var(--radius, 12px);
    overflow: hidden;
    background: transparent;
  }

  .tweet-embed iframe {
    display: block;
    width: 100%;
    border-radius: inherit;
    background: transparent;
  }

  .tweet-embed div:first-child div:first-child {
    margin: auto;
  }
  .tweet-fallback {
    margin: 0.4rem 0;
    text-align: center;
    font-size: 0.95rem;
  }
  .tweet-fallback a {
    color: inherit;
    text-decoration: underline;
  }
</style>
