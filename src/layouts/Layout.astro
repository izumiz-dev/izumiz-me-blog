---
import { SEO } from 'astro-seo';
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts';
import { getDatabase } from '@lib/notion/client.ts';
import { getNavLink, getStaticFilePath, filePath } from '@lib/blog-helpers.ts';
import '@styles/syntax-coloring.css';
import GoogleAnalytics from '@components/GoogleAnalytics.astro';
import SearchModal from '@components/SearchModal.astro';
import SearchButton from '@components/SearchButton.astro';

import './global.css';
import './layout.css';

export type OpenGraph = {
  basic: {
    title: string;
    type: 'article' | 'website';
    image: string;
  };
  image: {
    alt: string;
  };
};

export interface Props {
  title: string;
  description: string;
  path: string;
  ogImage: string;
  openGraph: OpenGraph;
  includeKatex?: boolean;
  preloadImages?: string[];
}

const {
  title = '',
  // description = '',
  path = '/',
  // ogImage = '',
  openGraph,
  includeKatex = false,
  preloadImages = [],
} = Astro.props;

const database = await getDatabase();

const isGalleryPage = Astro.url.pathname.startsWith(getNavLink('/gallery'));

const siteTitle = title ? `${title} - ${database.Title}` : database.Title;
const siteURL = new URL(getNavLink(path), Astro.site).toString();
// const siteOGImage = new URL(
//   getStaticFilePath('/default-og-image.png'),
//   Astro.site
// );

let coverImageURL: string = '';
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url;
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url));
    } catch {
      console.log('Invalid DB cover image URL');
    }
  }
}

let customIconURL: string = '';
if (database.Icon && database.Icon.Type === 'file' && 'Url' in database.Icon) {
  try {
    customIconURL = filePath(new URL(database.Icon.Url));
  } catch {
    console.log('Invalid DB custom icon URL');
  }
}

const uniquePreloadImages = preloadImages
  .filter((url): url is string => Boolean(url))
  .filter((url) => url !== coverImageURL)
  .filter((url, index, arr) => arr.indexOf(url) === index);
---

<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="color-scheme" content="light dark" />
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#0f111b" media="(prefers-color-scheme: dark)" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <link rel="canonical" href={siteURL} />
    {
      includeKatex && (
        <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />
      )
    }
    {
      coverImageURL && (
        <link
          rel="preload"
          as="image"
          href={coverImageURL}
          fetchpriority="high"
        />
      )
    }
    {
      uniquePreloadImages.map((imageUrl) => {
        const isExternal =
          imageUrl.startsWith('http://') || imageUrl.startsWith('https://');
        return (
          <link
            rel="preload"
            as="image"
            href={imageUrl}
            fetchpriority="high"
            crossorigin={isExternal ? 'anonymous' : undefined}
          />
        );
      })
    }
    <SEO
      charset="UTF-8"
      title={siteTitle}
      openGraph={openGraph}
      twitter={{
        card: 'summary_large_image',
      }}
    />
    {
      includeKatex && (
        <>
          <link
            rel="preload"
            as="style"
            href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
            integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
            crossorigin="anonymous"
          />
          <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
            integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
            media="print"
            onload="this.media='all'"
            crossorigin="anonymous"
          />
        </>
      )
    }
    {
      includeKatex && (
        <noscript>
          <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
            integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
            crossorigin="anonymous"
          />
        </noscript>
      )
    }
    <slot name="head" />
  </head>
  <body class:list={[{ 'gallery-page': isGalleryPage }]}>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <div class="container">
      <header>
        {
          coverImageURL && (
            <div class="cover">
              <img
                src={coverImageURL}
                alt="Site cover image"
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            </div>
          )
        }
      </header>

      <div>
        <main>
          <div class="content">
            <header>
              <h1>
                <a href={getNavLink('/')}>
                  {
                    database.Icon && database.Icon.Type === 'emoji' ? (
                      <>
                        <span>
                          {'Emoji' in database.Icon ? database.Icon.Emoji : ''}
                        </span>
                        {database.Title}
                      </>
                    ) : database.Icon &&
                      database.Icon.Type === 'external' &&
                      'Url' in database.Icon ? (
                      <>
                        <img src={database.Icon.Url} alt="Site icon image" />
                        {database.Title}
                      </>
                    ) : database.Icon &&
                      database.Icon.Type === 'file' &&
                      customIconURL ? (
                      <>{database.Title}</>
                    ) : (
                      database.Title
                    )
                  }
                </a>
              </h1>
              <div class="description">
                {database.Description}
              </div>
              <nav class="header-nav">
                <a
                  href={getNavLink('/')}
                  class={`nav-link nav-blog ${
                    Astro.url.pathname === getNavLink('/') ||
                    Astro.url.pathname.startsWith(getNavLink('/posts'))
                      ? 'active'
                      : ''
                  }`}>Blog</a
                >
                <a
                  href={getNavLink('/gallery/')}
                  class={`nav-link nav-gallery ${
                    Astro.url.pathname.startsWith(getNavLink('/gallery'))
                      ? 'active'
                      : ''
                  }`}>Gallery</a
                >
              </nav>
            </header>

            <slot name="main" />

            <footer>
              <div>
                <span>Powered by&nbsp;</span>
                <a href="https://github.com/otoyo/astro-notion-blog"
                  >astro-notion-blog</a
                >
              </div>
              <div>
                <a href="https://github.com/izumiz/izumiz-me-blog"
                  >View this blog repo</a
                >
              </div>
            </footer>
          </div>
        </main>

        {
          !isGalleryPage && (
            <aside>
              <SearchButton />
              <slot name="aside" />
            </aside>
          )
        }
      </div>
    </div>

    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} defer />
      )
    }
    <script>
      document.addEventListener('astro:page-load', () => {
        if (typeof window.refreshFsLightbox === 'function') {
          window.refreshFsLightbox();
        }
      });
    </script>
  </body>
</html>
